nreps=1000000
COMBOS<- data.frame(t0=runif(nreps,0.2,0.220),
Linf=runif(nreps,300,400),
A=runif(nreps,.25,.75),
uprop=runif(nreps,0.01,0.90),
b=runif(nreps,3.1,3.5),
a=runif(nreps,-5.8,-5.5))
COMBOS$u=COMBOS$uprop*COMBOS$A
COMBOS$Z<--log(1-COMBOS$A)
COMBOS$Fmort<-(COMBOS$u*COMBOS$Z)/COMBOS$A
#lnk<- 6.62-1.32*(log(COMBOS$Linf))
COMBOS$k<-exp(6.62-1.32*(log(COMBOS$Linf)))
tmp<-COMBOS
tmp<-subset(tmp,
(t0>=min(0.2)) & (t0<=max(0.215)) &
(Linf>=min(333)) & (Linf<=max(373)) &
(A>=min(0.4)) & (A<=max(0.6)) &
(uprop>=min(0.4)) & (uprop<=max(0.8)) &
(a>=min(-5.6)) & (a<=max(-5.5)) &
(b>=min(3.2)) & (b<=max(3.4)))
tmp$a<-10^tmp$a
#tmp$quality<-as.numeric(unlist(strsplit(input$quality,",")))
#tmp$quality<-tmp$quality*25.4
#add all your inputs
#out$t0<-runif(input$nlakes,min(input$t0),max(input$t0)) example of previous method
# out$nLakes<-input$nLakes
sim<-tmp
runApp()
runApp()
nreps=1000000
COMBOS<- data.frame(t0=runif(nreps,0.2,0.220),
Linf=runif(nreps,300,400),
A=runif(nreps,.25,.75),
uprop=runif(nreps,0.01,0.90),
b=runif(nreps,3.1,3.5),
aui=runif(nreps,-5.8,-5.5))
COMBOS$u=COMBOS$uprop*COMBOS$A
COMBOS$Z<--log(1-COMBOS$A)
COMBOS$Fmort<-(COMBOS$u*COMBOS$Z)/COMBOS$A
#lnk<- 6.62-1.32*(log(COMBOS$Linf))
COMBOS$k<-exp(6.62-1.32*(log(COMBOS$Linf)))
COMBOS$a<-10^COMBOS$aui
sim<- COMBOS
#bring in mll
mll<-("8,9,10")
sim$quality<-12
#sim$quality<-as.numeric(unlist(strsplit(input$quality,",")))
sim$quality<-sim$quality*25.4
mll<-as.numeric(unlist(strsplit(mll,",")))
mll<-mll*25.4
#merge mll with big dataframe.  creates a list of dataframes with a ll as a column, then combines all dataframes
func<-function(x,y){y=data.frame(x,y)}
mf<-lapply(mll,func,sim)
mf<-do.call("rbind",mf)
colnames(mf)[1]<-"mll"
###Moved these calculations in the original raw_spectrum build
#mf$u<-mf$uprop*mf$A ###Calculate Fmort
#mf$Z<--log(1-mf$A)
#mf$Fmort<-(mf$u*mf$Z)/mf$A
##set time of fishery recruitment from mll
mf$tr=((log(1-(mf$mll/mf$Linf))/(-(mf$k)))+mf$t0)
mf$tquality=((log(1-(mf$quality/mf$Linf))/(-(mf$k)))+mf$t0)
out<-mf
nreps=100000
COMBOS<- data.frame(t0=runif(nreps,0.2,0.220),
Linf=runif(nreps,300,400),
A=runif(nreps,.25,.75),
uprop=runif(nreps,0.01,0.90),
b=runif(nreps,3.1,3.5),
aui=runif(nreps,-5.8,-5.5))
COMBOS$u=COMBOS$uprop*COMBOS$A
COMBOS$Z<--log(1-COMBOS$A)
COMBOS$Fmort<-(COMBOS$u*COMBOS$Z)/COMBOS$A
#lnk<- 6.62-1.32*(log(COMBOS$Linf))
COMBOS$k<-exp(6.62-1.32*(log(COMBOS$Linf)))
COMBOS$a<-10^COMBOS$aui
sim<- COMBOS
#bring in mll
mll<-("8,9,10")
sim$quality<-12
#sim$quality<-as.numeric(unlist(strsplit(input$quality,",")))
sim$quality<-sim$quality*25.4
mll<-as.numeric(unlist(strsplit(mll,",")))
mll<-mll*25.4
#merge mll with big dataframe.  creates a list of dataframes with a ll as a column, then combines all dataframes
func<-function(x,y){y=data.frame(x,y)}
mf<-lapply(mll,func,sim)
mf<-do.call("rbind",mf)
colnames(mf)[1]<-"mll"
###Moved these calculations in the original raw_spectrum build
#mf$u<-mf$uprop*mf$A ###Calculate Fmort
#mf$Z<--log(1-mf$A)
#mf$Fmort<-(mf$u*mf$Z)/mf$A
##set time of fishery recruitment from mll
mf$tr=((log(1-(mf$mll/mf$Linf))/(-(mf$k)))+mf$t0)
mf$tquality=((log(1-(mf$quality/mf$Linf))/(-(mf$k)))+mf$t0)
out<-mf
sim<-out
#sim1<-subset.data.frame(sim, lake==1)
#sim2<-subset.data.frame(sim, lake==2)
#sim3<-subset.data.frame(sim, lake==3)
step<- 0.1
ages<-seq(0,maxage+1,step)
L1<-Y1<-N1<-NH1<-QH1<-matrix(0,nrow(sim),length(ages))
N1[,1]<- 1000 #Initial Recruitment N0
for(i in 2:ncol(N1))
{
#    indx1<-ifelse(ages[i]>=sim$min_age_harvested & ages[i]<sim$tr,1,0)
indx2<-ifelse(ages[i]>=sim$tr,1,0)
indx3<-ifelse(ages[i]>=sim$tquality,1,0)
harvested<-N1[,i-1]*(sim$Fmort*indx2)
qharvested<-N1[,i-1]*(sim$Fmort*indx3)
mortality<- N1[,i-1]*(sim$Z-sim$Fmort)
dN<- (mortality+harvested)*step
dNH<-harvested*step
dQH<-qharvested*step
Lt<-sim$Linfc * (1 - exp(-sim$k* (ages[i-1]-sim$t0)))
###WEIGHT AT AGE
Wt = (vals()$a[1]*Lt^vals()$b[1])/1000
dY<-ifelse(harvested==0,0,(Wt*harvested)*step)
# AvgWeightharvested<-ifelse(harvested==0,0,())
N1[,i]<-N1[,i-1]-dN
#N[,2]<-N[,1]-dN
#N[,i+1]<-N[,i]+(1.5*dN[i])-0.5(dN[i-1])
Y1[,i]<- Y1[,i-1]+dY
#Y[,2]<- Y[,1]+dY
#Y[,i+1]<- Y[,i]+(1.5*dY[i])-0.5(dY[i-1])
L1[,i]<-  Lt*(1/N1[,i-1])
NH1[,i]<- NH1[,i-1]+dNH
QH1[,i]<- QH1[,i-1]+dQH
}
sim$Yab<- Y1[,ncol(Y1)]
sim$AvgWt<-sim$Yab/(NH1[,ncol(NH1)])
sim$Harvestrate<-NH1[,ncol(NH1)]/(maxage-sim$tr)
sim$QualityHarvest<-QH1[,ncol(QH1)]/(maxage-sim$tr)
maxage<-8
##Utility Weights##
Yieldweight<-0.25
AvgWtweight<-0.25
Hrateweight<-0.25
QHrateweight<-0.25
nreps=100000
COMBOS<- data.frame(t0=runif(nreps,0.2,0.220),
Linf=runif(nreps,300,400),
A=runif(nreps,.25,.75),
uprop=runif(nreps,0.01,0.90),
b=runif(nreps,3.1,3.5),
aui=runif(nreps,-5.8,-5.5))
COMBOS$u=COMBOS$uprop*COMBOS$A
COMBOS$Z<--log(1-COMBOS$A)
COMBOS$Fmort<-(COMBOS$u*COMBOS$Z)/COMBOS$A
#lnk<- 6.62-1.32*(log(COMBOS$Linf))
COMBOS$k<-exp(6.62-1.32*(log(COMBOS$Linf)))
COMBOS$a<-10^COMBOS$aui
sim<- COMBOS
#bring in mll
mll<-("8,9,10")
sim$quality<-12
#sim$quality<-as.numeric(unlist(strsplit(input$quality,",")))
sim$quality<-sim$quality*25.4
mll<-as.numeric(unlist(strsplit(mll,",")))
mll<-mll*25.4
#merge mll with big dataframe.  creates a list of dataframes with a ll as a column, then combines all dataframes
func<-function(x,y){y=data.frame(x,y)}
mf<-lapply(mll,func,sim)
mf<-do.call("rbind",mf)
colnames(mf)[1]<-"mll"
###Moved these calculations in the original raw_spectrum build
#mf$u<-mf$uprop*mf$A ###Calculate Fmort
#mf$Z<--log(1-mf$A)
#mf$Fmort<-(mf$u*mf$Z)/mf$A
##set time of fishery recruitment from mll
mf$tr=((log(1-(mf$mll/mf$Linf))/(-(mf$k)))+mf$t0)
mf$tquality=((log(1-(mf$quality/mf$Linf))/(-(mf$k)))+mf$t0)
out<-mf
sim<-out
#sim1<-subset.data.frame(sim, lake==1)
#sim2<-subset.data.frame(sim, lake==2)
#sim3<-subset.data.frame(sim, lake==3)
step<- 0.1
ages<-seq(0,maxage+1,step)
L1<-Y1<-N1<-NH1<-QH1<-matrix(0,nrow(sim),length(ages))
N1[,1]<- 1000 #Initial Recruitment N0
for(i in 2:ncol(N1))
{
#    indx1<-ifelse(ages[i]>=sim$min_age_harvested & ages[i]<sim$tr,1,0)
indx2<-ifelse(ages[i]>=sim$tr,1,0)
indx3<-ifelse(ages[i]>=sim$tquality,1,0)
harvested<-N1[,i-1]*(sim$Fmort*indx2)
qharvested<-N1[,i-1]*(sim$Fmort*indx3)
mortality<- N1[,i-1]*(sim$Z-sim$Fmort)
dN<- (mortality+harvested)*step
dNH<-harvested*step
dQH<-qharvested*step
Lt<-sim$Linfc * (1 - exp(-sim$k* (ages[i-1]-sim$t0)))
###WEIGHT AT AGE
Wt = (vals()$a[1]*Lt^vals()$b[1])/1000
dY<-ifelse(harvested==0,0,(Wt*harvested)*step)
# AvgWeightharvested<-ifelse(harvested==0,0,())
N1[,i]<-N1[,i-1]-dN
#N[,2]<-N[,1]-dN
#N[,i+1]<-N[,i]+(1.5*dN[i])-0.5(dN[i-1])
Y1[,i]<- Y1[,i-1]+dY
#Y[,2]<- Y[,1]+dY
#Y[,i+1]<- Y[,i]+(1.5*dY[i])-0.5(dY[i-1])
L1[,i]<-  Lt*(1/N1[,i-1])
NH1[,i]<- NH1[,i-1]+dNH
QH1[,i]<- QH1[,i-1]+dQH
}
sim$Yab<- Y1[,ncol(Y1)]
sim$AvgWt<-sim$Yab/(NH1[,ncol(NH1)])
sim$Harvestrate<-NH1[,ncol(NH1)]/(maxage-sim$tr)
sim$QualityHarvest<-QH1[,ncol(QH1)]/(maxage-sim$tr)
View(sim)
nreps=100000
COMBOS<- data.frame(t0=runif(nreps,0.2,0.220),
Linf=runif(nreps,300,400),
A=runif(nreps,.25,.75),
uprop=runif(nreps,0.01,0.90),
b=runif(nreps,3.1,3.5),
aui=runif(nreps,-5.8,-5.5))
COMBOS$u=COMBOS$uprop*COMBOS$A
COMBOS$Z<--log(1-COMBOS$A)
COMBOS$Fmort<-(COMBOS$u*COMBOS$Z)/COMBOS$A
#lnk<- 6.62-1.32*(log(COMBOS$Linf))
COMBOS$k<-exp(6.62-1.32*(log(COMBOS$Linf)))
COMBOS$a<-10^COMBOS$aui
sim<- COMBOS
#bring in mll
mll<-("8,9,10")
sim$quality<-12
#sim$quality<-as.numeric(unlist(strsplit(input$quality,",")))
sim$quality<-sim$quality*25.4
mll<-as.numeric(unlist(strsplit(mll,",")))
mll<-mll*25.4
#merge mll with big dataframe.  creates a list of dataframes with a ll as a column, then combines all dataframes
func<-function(x,y){y=data.frame(x,y)}
mf<-lapply(mll,func,sim)
mf<-do.call("rbind",mf)
colnames(mf)[1]<-"mll"
###Moved these calculations in the original raw_spectrum build
#mf$u<-mf$uprop*mf$A ###Calculate Fmort
#mf$Z<--log(1-mf$A)
#mf$Fmort<-(mf$u*mf$Z)/mf$A
##set time of fishery recruitment from mll
mf$tr=((log(1-(mf$mll/mf$Linf))/(-(mf$k)))+mf$t0)
mf$tquality=((log(1-(mf$quality/mf$Linf))/(-(mf$k)))+mf$t0)
out<-mf
sim<-out
#sim1<-subset.data.frame(sim, lake==1)
#sim2<-subset.data.frame(sim, lake==2)
#sim3<-subset.data.frame(sim, lake==3)
step<- 0.1
ages<-seq(0,maxage+1,step)
L1<-Y1<-N1<-NH1<-QH1<-matrix(0,nrow(sim),length(ages))
N1[,1]<- 1000 #Initial Recruitment N0
for(i in 2:ncol(N1))
{
#    indx1<-ifelse(ages[i]>=sim$min_age_harvested & ages[i]<sim$tr,1,0)
indx2<-ifelse(ages[i]>=sim$tr,1,0)
indx3<-ifelse(ages[i]>=sim$tquality,1,0)
harvested<-N1[,i-1]*(sim$Fmort*indx2)
qharvested<-N1[,i-1]*(sim$Fmort*indx3)
mortality<- N1[,i-1]*(sim$Z-sim$Fmort)
dN<- (mortality+harvested)*step
dNH<-harvested*step
dQH<-qharvested*step
Lt<-sim$Linfc * (1 - exp(-sim$k* (ages[i-1]-sim$t0)))
###WEIGHT AT AGE
#Wt = (vals()$a[1]*Lt^vals()$b[1])/1000 FOR PRACTICE
Wt = (sim$a[1]*Lt^sim$b[1])/1000
dY<-ifelse(harvested==0,0,(Wt*harvested)*step)
# AvgWeightharvested<-ifelse(harvested==0,0,())
N1[,i]<-N1[,i-1]-dN
#N[,2]<-N[,1]-dN
#N[,i+1]<-N[,i]+(1.5*dN[i])-0.5(dN[i-1])
Y1[,i]<- Y1[,i-1]+dY
#Y[,2]<- Y[,1]+dY
#Y[,i+1]<- Y[,i]+(1.5*dY[i])-0.5(dY[i-1])
L1[,i]<-  Lt*(1/N1[,i-1])
NH1[,i]<- NH1[,i-1]+dNH
QH1[,i]<- QH1[,i-1]+dQH
}
sim$Yab<- Y1[,ncol(Y1)]
sim$AvgWt<-sim$Yab/(NH1[,ncol(NH1)])
sim$Harvestrate<-NH1[,ncol(NH1)]/(maxage-sim$tr)
sim$QualityHarvest<-QH1[,ncol(QH1)]/(maxage-sim$tr)
sim<-out
step<- 0.1
ages<-seq(0,maxage+1,step)
L1<-Y1<-N1<-NH1<-QH1<-matrix(0,nrow(sim),length(ages))
N1[,1]<- 1000 #Initial Recruitment N0
View(sim)
View(N1)
for(i in 2:ncol(N1))
{
#    indx1<-ifelse(ages[i]>=sim$min_age_harvested & ages[i]<sim$tr,1,0)
indx2<-ifelse(ages[i]>=sim$tr,1,0)
indx3<-ifelse(ages[i]>=sim$tquality,1,0)
harvested<-N1[,i-1]*(sim$Fmort*indx2)
qharvested<-N1[,i-1]*(sim$Fmort*indx3)
mortality<- N1[,i-1]*(sim$Z-sim$Fmort)
dN<- (mortality+harvested)*step
dNH<-harvested*step
dQH<-qharvested*step
Lt<-sim$Linfc * (1 - exp(-sim$k* (ages[i-1]-sim$t0)))
###WEIGHT AT AGE
#Wt = (vals()$a[1]*Lt^vals()$b[1])/1000 FOR PRACTICE
Wt = (sim$a*Lt^sim$b)/1000
dY<-ifelse(harvested==0,0,(Wt*harvested)*step)
# AvgWeightharvested<-ifelse(harvested==0,0,())
N1[,i]<-N1[,i-1]-dN
#N[,2]<-N[,1]-dN
#N[,i+1]<-N[,i]+(1.5*dN[i])-0.5(dN[i-1])
Y1[,i]<- Y1[,i-1]+dY
#Y[,2]<- Y[,1]+dY
#Y[,i+1]<- Y[,i]+(1.5*dY[i])-0.5(dY[i-1])
L1[,i]<-  Lt*(1/N1[,i-1])
NH1[,i]<- NH1[,i-1]+dNH
QH1[,i]<- QH1[,i-1]+dQH
}
sim$Yab<- Y1[,ncol(Y1)]
sim$AvgWt<-sim$Yab/(NH1[,ncol(NH1)])
sim$Harvestrate<-NH1[,ncol(NH1)]/(maxage-sim$tr)
sim$QualityHarvest<-QH1[,ncol(QH1)]/(maxage-sim$tr)
View(L1)
View(N1)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x<-c(9,10,11)
x<-function(){
ll<-c(9,10,11)
return(ll)
}
ll[[1]]
x()[[1]]
x<-function(){
ll<-c("9","10","11")
ll<-as.numeric(list(ll))
return(ll)
}
x()[[1]]
x()
x<-function(){
ll<-c("9","10","11")
ll<-list(ll)
return(ll)
}
x()[[1]]
x()
x()[[1]][1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x<-function(){
ll<-c("9","10","11")
ll<-list(ll)
return(ll)
}
x()[[1]][1]
x()[[1]]
x<-function(){
ll<-c("9","10","11")
#ll<-list(ll)
return(ll)
}
x()[[1]]
runApp()
X<- c(1:10)
Ylo<- runif(10, 0,1)
Yhi<- runif(10,2,3)
trans_black<- rgb(0,0,0,alpha=40,maxColorValue=255)
plot(Yhi~X,type='n',ylim=c(0,3))
polygon(x=c(X,rev(X)),y=c(Ylo,rev(Yhi)),col=trans_black)
mn<-apply(cbind(Ylo,Yhi),1,mean)
points(mn~X,type='l',col="black")
trans_red<- rgb(228,16,16,alpha=40,maxColorValue=255)
Ylo<- runif(10, 0,1)
Yhi<- runif(10,2,3)
polygon(x=c(X,rev(X)),y=c(Ylo,rev(Yhi)),col=trans_red)
mn<-apply(cbind(Ylo,Yhi),1,mean)
points(mn~X,type='l',col="red")
x<-"MColvin"
x<-"MColvin"
rewrite<-function(x){
if x=="MColvin"{x=="McLovin"}
return(x)
}
rewrite(x)
x<-"MColvin"
rewrite<-function(x){
if x=="MColvin"{x=="McLovin"}
return(x)
}
rewrite<-function(x){
if x=="MColvin"{x=="McLovin"},
return(x)
}
x<-"MColvin"
rewrite<-function(x){
x<-ifelse(x=="MColvin","McLovin",NULL)
return(x)
}
rewrite(x)
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc", "Statistics"))
rewrite<-function(x){
x<-ifelse(x%in%c("MColvin","mcolvin","M.Colvin","Mcolvin","Mike Colvin"),"McLovin",NULL)
return(x)
}
rewrite(mcolvin)
rewrite("mcolvin")
rewrite<-function(x){
x<-ifelse(x%in%c("ol"),"McLovin",NULL)
return(x)
}
rewrite("mcolvin")
rewrite<-function(x){
x<-strsplit(x)
x<-ifelse(x%in%c("ol"),"McLovin",NULL)
return(x)
}
rewrite("mcolvin")
x<-"MColvin"
rewrite<-function(x){
x<-ifelse(x%in%c("MColvin","mcolvin","M.Colvin","Mcolvin","Mike Colvin"),"McLovin",NULL)
return(x)
}
rewrite(x)
